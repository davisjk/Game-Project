<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = room_width/2;
y = 0;
bossHp = 100;
alarm_separation = 10;
depth = 11;
//image_xscale = 3;
//image_yscale = 3;

alarm[1] = 5;

/* Boss's healthbar */
barOutline = instance_create(1450, 70, obj_healthbar_outline);
barFill = instance_create(1450, 70, obj_healthbar_fill);
barFill.depth = -100;
barOutline.depth = -101;
barFill.image_yscale = 0.6;
barOutline.image_yscale = 0.6;

bulletPattern = 0;
safespot = 0;
startedphase = false;


hitBy = 0; //number of bullets hit the boss recently
alarm[4] = 1;

//The player hasn't been hit yet
global.player_hit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//reset hitBy
hitBy = 0;

alarm[4] = room_speed/8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Phase 3

var rand, i, rate;
rate = 4;

// make random swarm of bullets in various directions
for (i = 0; i &lt; irandom_range(0, rate/2); i++) {
    rand[0] = irandom_range(1, 5);
    rand[1] = random_range(1, 3);
    scr_bullet_create(random(2*pi), (rand[0]-3)/pi/9/rand[1], 
        y+sprite_height/4, (5-abs(rand[0]-3))*2-rand[1], 
        log2(rand[1]), obj_bullet_enemy, rand[0]+11, 1);
}

// make predictable bullets to dodge
if (bulletPattern % (rate*15) == 0) {
    for (i = 0; i &lt; 30; i++) {
        if (bulletPattern % (rate*60) == 0) {
            scr_bullet_create(i*pi/40, 0, y+sprite_height/4, 5, 1, obj_bullet_enemy, 6, 1);
            scr_bullet_create(pi+i*pi/40, 0, y+sprite_height/4, 5, 1, obj_bullet_enemy, 7, 1);
        } else if (bulletPattern % (rate*30) == 0) {
            scr_bullet_create(i*pi/40, 0, y+sprite_height/4, 5, 1, obj_bullet_enemy, 7, 1);
            scr_bullet_create(pi+i*pi/40, 0, y+sprite_height/4, 5, 1, obj_bullet_enemy, 6, 1);
        } else if (bulletPattern % (rate*45) == 0) {
            scr_bullet_create(pi/2+i*pi/40, 0, y+sprite_height/4, 5, 1, obj_bullet_enemy, 7, 1);
            scr_bullet_create(3*pi/2+i*pi/40, 0, y+sprite_height/4, 5, 1, obj_bullet_enemy, 6, 1);
        } else {
            scr_bullet_create(pi/2+i*pi/40, 0, y+sprite_height/4, 5, 1, obj_bullet_enemy, 6, 1);
            scr_bullet_create(3*pi/2+i*pi/40, 0, y+sprite_height/4, 5, 1, obj_bullet_enemy, 7, 1);
        }
    }
}

bulletPattern += rate;
alarm[3] = rate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Phase 2

var i;

if(bulletPattern == 0)
{
    for(i = 0; i &lt; 2*pi; i += pi/8)
    {
        scr_bullet_create(i, 0, y+sprite_height/2-20, 7, 1, obj_bullet_enemy, 10, 1);
    }
}
else if(bulletPattern == 1)
{
    for(i = pi/24; i &lt; 2*pi; i += pi/8)
    {
        scr_bullet_create(i, 0, y+sprite_height/2-20, 7, 1, obj_bullet_enemy, 11, 1);
    }
}
else if(bulletPattern == 2)
{
    for(i = 0; i &lt; 2*pi; i += pi/8)
    {
        scr_bullet_create(i, 0, y+sprite_height/2-20, 7, 1, obj_bullet_enemy, 9, 1);
    }
}
else if(bulletPattern == 3)
{
    for(i = -pi/24; i &lt; 2*pi; i += pi/8)
    {
        scr_bullet_create(i, 0, y+sprite_height/2-20, 7, 1, obj_bullet_enemy, 10, 1);
    }
}
else if(bulletPattern == 4)
{
    for(i = -pi/12; i &lt; 2*pi; i += pi/8)
    {
        scr_bullet_create(i, 0, y+sprite_height/2-20, 7, 1, obj_bullet_enemy, 8, 1);
    }
}
/*
else if(bulletPattern == 5)
{
    scr_bullet_create(global.theta, 0, y+sprite_height/2-20, 7, 5, obj_bullet_enemy, 10, 1);    
}
else if(bulletPattern == 6)
{
    for(i = 0; i &lt; 2*pi; i += pi/8)
    {
        scr_bullet_create(i, 0, y+sprite_height/2-20, 7, 3, obj_bullet_enemy, 8, 1);
    }
    //scr_bullet_create(global.theta, 0, y+sprite_height/2-20, 7, 5, obj_bullet_enemy, 10, 1);    
}
else if(bulletPattern == 7)
{
    scr_bullet_create(global.theta, 0, y+sprite_height/2-20, 7, 5, obj_bullet_enemy, 10, 1);    
}
else if(bulletPattern == 8)
{
    for(i = pi/24; i &lt; 2*pi; i += pi/8)
    {
        scr_bullet_create(i, 0, y+sprite_height/2-20, 7, 3, obj_bullet_enemy, 8, 1);
    }
    //scr_bullet_create(global.theta, 0, y+sprite_height/2-20, 7, 5, obj_bullet_enemy, 10, 1);    
}
else if(bulletPattern == 9)
{
    scr_bullet_create(global.theta, 0, y+sprite_height/2-20, 7, 5, obj_bullet_enemy, 10, 1);    
}
else if(bulletPattern == 10)
{
    for(i = -pi/12; i &lt; 2*pi; i += pi/8)
    {
        scr_bullet_create(i, 0, y+sprite_height/2-20, 7, 3, obj_bullet_enemy, 8, 1);
    }
    //scr_bullet_create(global.theta, 0, y+sprite_height/2-20, 7, 5, obj_bullet_enemy, 10, 1);    
}
*/
//Fire ring of bullets
else if(bulletPattern == 10)//change to 6 above the last time we fired
{
    safespot = (global.theta + random_range(pi/2, 3*pi/2)) % (2*pi);
    for(i = 0; i &lt; 2*pi; i += pi/40)
    {
        
        if(abs(i-safespot) &gt; pi/10 &amp;&amp; abs(i-safespot) &lt; 19*pi/10)
        {
            scr_bullet_create(i, 0, y+sprite_height/2-20, 7, 1, obj_bullet_enemy, 5, 1);
        }
        else if(abs(i-safespot) &gt; pi/20 &amp;&amp; abs(i-safespot) &lt; 39*pi/20)
        {
            scr_bullet_create(i, 0, y+sprite_height/2-20, 7, 1, obj_bullet_enemy, 4, 1);
        }
        
    }
}

else if (bulletPattern = 12)// always two seconds after the ring
{
    scr_bullet_create(safespot + pi/60, 0, y+sprite_height/2-20, 7, 1, obj_bullet_enemy, 5, 1);
    scr_bullet_create(safespot - pi/60, 0, y+sprite_height/2-20, 7, 1, obj_bullet_enemy, 5, 1);  
    
    scr_bullet_create(safespot + pi/20, 0, y+sprite_height/2-20, 7, 1, obj_bullet_enemy, 5, 1);
    scr_bullet_create(safespot - pi/20, 0, y+sprite_height/2-20, 7, 1, obj_bullet_enemy, 5, 1);    
}

else if(bulletPattern &gt;= 12)
{
    bulletPattern = -1;
}

if(bossHp &lt; 34 &amp;&amp; (bulletPattern == -1 || (bulletPattern &gt;= 4 &amp;&amp; bulletPattern &lt; 10)))
{
    alarm[3] = alarm_separation;
    bulletPattern = 0;
    //we beat phase 2
    if(!global.achievement_phase_two)
    {
        global.upgrade_points += 1;
        global.achievement_phase_two = true;
    }
}
else
{
    alarm[2] = 10;
    bulletPattern += 1;
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Phase 1

/* Initialize data for a new arc */
if (startedphase == false || arc_i == 13) {
    startedphase = true;
    arc_i = 0;
    arc_center = random_range(0, 2*pi);
    dtheta = 0;
    y0 = y+sprite_height/2-20;
    bullet_dy = 7;
    size = 1;
    obj = obj_bullet_enemy;
    img = irandom_range(4, 7);
    dmg = 1;
}


/* Create arcs */
if (arc_i &lt; 10) {
    scr_bullet_create(arc_center+arc_i/10, dtheta, y0, bullet_dy, size, obj, img, dmg);
    scr_bullet_create(arc_center-arc_i/10, dtheta, y0, bullet_dy, size, obj, img, dmg);
}
arc_i++; // setup for next arc

/* Reset alarms */
if(bossHp &lt; 67 &amp;&amp; arc_i == 13)
{
    alarm[2] = alarm_separation;
    //we beat phase 1
    if(!global.achievement_phase_one)
    {
        global.upgrade_points += 1;
        global.achievement_phase_one = true;
    }
}
else
{
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var animation_speed = .2;

barFill.image_xscale = bossHp / 100;

if (bossHp &lt;= 0) {
    //global.victory = true;
    global.score -= round(global.time*10);
    
    //we killed this boss
    if(!global.achievement_first_kill)
    {
        global.upgrade_points += 1;
        global.achievement_first_kill = true;
    }
    
    //we never got hit
    if(!global.player_hit &amp;&amp; !global.achievement_untouchable)
    {
        global.upgrade_points += 1;
        global.achievement_untouchable = true;
    }
    
    //we killed this boss with a score less than 10000
    if(global.score &lt; 10000 &amp;&amp; !global.achievement_low_score)
    {
        global.upgrade_points += 1;
        global.achievement_low_score = true;
    }
    
    //we killed this boss with a score greater than 15000
    if(global.score &gt; 15000 &amp;&amp; !global.achievement_score_one)
    {
        global.upgrade_points += 1;
        global.achievement_score_one = true;
    }
    
    //we killed this boss in under 75 seconds
    if(global.time &lt; 75 &amp;&amp; !global.achievement_speed_one)
    {
        global.upgrade_points += 1;
        global.achievement_speed_one = true;
    }
    
    //we didn't move right
    if(!global.hasMovedRight &amp;&amp; !global.achievement_left)
    {
        global.upgrade_points += 1;
        global.achievement_left = true;
    }
    
    global.next_room = 2;
    room_goto(rm_upgrades);
}

/* Boss animation */

if (keyboard_check(ord("D"))) {
    if (image_angle &lt; 3) image_angle += animation_speed;
    else image_angle = 3;
}

else if (keyboard_check(ord("A"))) {
    if (image_angle &gt; -3) image_angle -= animation_speed;
    else image_angle = -3;
}

else {
    if (image_angle &lt; -animation_speed*2) image_angle += animation_speed*2;
    else if (image_angle &gt; animation_speed*2) image_angle -= animation_speed*2;
    else image_angle = 0;
}

if(hitBy &gt;= 5)
{
    if(!global.achievement_damage)
    {
        global.upgrade_points += 1;
    }
    global.achievement_damage = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.score += other.damage*100;
bossHp -= other.damage;
with (other) instance_destroy();
hitBy += 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_white);
draw_set_font(fnt_big_num);
draw_set_valign(fa_center);
draw_set_halign(fa_right);

drawx = global.display_scale_x * (barOutline.x+barOutline.sprite_width-8);
drawy = global.display_scale_y * (barOutline.y+barOutline.sprite_height/2);
draw_text(drawx, drawy, string(round(bossHp)));
 
draw_set_halign(fa_left);
drawx = global.display_scale_x * (barOutline.x+5);
drawy = global.display_scale_y * (barOutline.y+barOutline.sprite_height/2);
draw_text(drawx, drawy, "BOSS");

draw_set_font(-1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
